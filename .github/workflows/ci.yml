name: CI Pipeline

permissions:
  contents: write

on:
  pull_request:
    branches: [dev]
  push:
    branches: [dev, staging, main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:20.10.16-dind
        options: --privileged
    steps:
      - name: Cleanup disk before job
        run: |
          echo "Disk space before cleanup:"
          df -h
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo apt-get clean
          docker system prune -af || true
          docker volume prune -f || true
          echo "Disk space after cleanup:"
          df -h

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Rust (for tokenizers compilation)
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install backend dependencies (for unit tests)
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Run backend unit tests
        working-directory: ./backend
        env:
          PYTHONPATH: ${{ github.workspace }}/backend
        run: pytest tests/unit

      - name: Build backend Docker image
        run: docker build -f backend/Dockerfile -t my-backend:ci backend/

      - name: Run backend container
        run: |
          docker run -d --name backend-test -p 8000:8000 my-backend:ci
          for i in {1..30}; do
            curl -f http://localhost:8000/healthcheck && break
            echo "Waiting for backend container to be ready..."
            sleep 1
          done

      - name: Run backend integration tests
        working-directory: ./backend
        env:
          BACKEND_URL: http://localhost:8000
          PYTHONPATH: ${{ github.workspace }}/backend
        run: pytest tests/integration

      - name: Stop backend container & clean docker
        run: |
          docker stop backend-test || true
          docker rm backend-test || true
          docker system prune -af || true
          docker volume prune -f || true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test

  push-to-staging:
    needs: build-and-test
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Force push dev to staging branch
        run: git push -f origin dev:staging

  e2e-tests:
    needs: build-and-test
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    runs-on: ubuntu-latest
    services:
      backend:
        image: jhoozou/project-devops:latest
        ports:
          - 8000:8000
    steps:
      - name: Cleanup disk before e2e
        run: |
          echo "Disk space before cleanup:"
          df -h
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo apt-get clean
          docker system prune -af || true
          docker volume prune -f || true
          echo "Disk space after cleanup:"
          df -h

      - name: Checkout frontend
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      - name: Start frontend server
        working-directory: ./frontend
        run: |
          npm run dev &
          sleep 5

      - name: Wait for frontend to be available
        run: |
          timeout=60
          start_time=$(date +%s)
          while true; do
            if curl -f http://localhost:5173; then
              echo "Frontend is up!"
              break
            else
              echo "Waiting for frontend..."
              sleep 3
            fi
            now=$(date +%s)
            elapsed=$(( now - start_time ))
            if [ $elapsed -ge $timeout ]; then
              echo "Timeout waiting for frontend"
              exit 1
            fi
          done

      - name: Install Cypress dependencies
        working-directory: ./frontend
        run: npm install cypress-file-upload

      - name: Run Cypress tests
        working-directory: ./frontend
        run: npx cypress run
        env:
          VITE_BACKEND_URL: http://localhost:8000

  build-and-deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup disk before build-and-deploy
        run: |
          echo "Disk space before cleanup:"
          df -h
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo apt-get clean
          docker system prune -af || true
          docker volume prune -f || true
          echo "Disk space after cleanup:"
          df -h

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -f backend/Dockerfile -t jhoozou/project-devops:latest backend/

      - name: Push Docker image
        run: docker push jhoozou/project-devops:latest

      # Ajouter étape de déploiement vers ta plateforme cloud (Railway, Koyeb, etc.)